module EthernetMod(
    output ETH_MDC,
    inout ETH_CRSDV,
    inout [1:0] ETH_RXD
    )
    (
    input clk, rst,                          // Clock & Reset
    input [1:0] mode,                        // Modes: 00 -> Disabled, 01 -> Reading & Saving, 10 -> Loading & Sending                
    input [7:0] dataRcv, dataLoad,           // Data receive & Data load
    output reg [7:0] dataStore, dataSend;    // Data store & Data send
    );

    logic eth_clk;
    logic eth_rst;

    // Boot Mode config
    // Mode 111
    assign ETH_CRSDV  = (eth_rst) ? 1 : 1'bz;
    assign ETH_RXD[0] = (eth_rst) ? 1 : 1'bz;
    assign ETH_RXD[1] = (eth_rst) ? 1 : 1'bz;

    // No mdio interface
    assign ETH_MDC = 0;

    parameter IDLE = 4'h0;
    parameter HEARING = 4'h1;
    parameter SENDING = 4'h2;
    parameter READING = 4'h3;
    parameter SAVING = 4'h4;
    parameter LOADING = 4'h5;

    logic [3:0] current_state, next_state;
    logic [3:0] pbleCount;                         // Preamble counter
    logic [7:0] buffer;                            // Module buffer
    logic cancel;                                  // Protocol abortation flag

    always @(current_state) begin
        case(current_state)
            IDLE:
                begin
                    pbleCount = 4'h0;
                    cancel = 0;
                    if(mode == 2'b01 || mode == 2'b10)
                        next_state = HEARING;
                end 

            HEARING:
                begin
                    if(mode == 2'b01) begin
                        while(pbleCount < 7) begin
                            if(dataRcv == 8'b10101010)
                                buffer = dataRcv;
                            else begin
                                cancel = 1;
                                break;
                            end
                        end

                        if(cancel == 0)
                            next_state = READING;
                        else 
                            next_state = IDLE;
                    end
                end

            READING:
                begin
                    
                end
        endcase
    end

    always @(posedge clk) begin
        if(rst)
           current_state <= IDLE;
	    else
           current_state <= next_state;
    end


endmodule